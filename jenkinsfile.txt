pipeline {
    agent any

    tools {
        // Define the JDK and Maven tool installations from Jenkins configuration
        jdk 'java8' // Replace 'JDK8' with the name of your configured JDK tool
        maven 'maven' // Replace 'Maven3' with the name of your configured Maven tool
    }

    stages {

        stage('Maven Build (Skip Tests)') {
            steps {
                 // Run Maven build with the custom settings and skip tests
                sh "mvn -s pom.xml clean install -DskipTests"
            }
        }

        stage('Run Maven Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Run Checkstyle Checks') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('SonarQube analysis') {
          environment{
             def scannerHome = tool 'SonarScanner'
          }
          steps{
            withSonarQubeEnv('SonarCloud') { // If you have configured more than one global server connection, you can specify its name
              sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=devops-project-msev3r_cicd-ansible -Dsonar.sources=src/ \
              -Dsonar.organization=devops-project-msev3r \
              -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
              -Dsonar.junit.reportsPath=target/surefire-reports/ \
              -Dsonar.jacoco.reportsPath=target/jacoco.exec \
              -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }         
          }
        }

        stage("Quality gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Upload to S3 with Timestamp') {
           steps {
              script {
                def artifactName = 'target/vprofile-v2.war'  // Replace with your artifact filename
                def buildTimestamp = env.BUILD_ID

                  def renamedArtifactName = "my-app-${buildTimestamp}.war"

                 // Upload the renamed artifact with the Jenkins build timestamp to S3
                sh "aws s3 cp ${artifactName} s3://elasticbeanstalk-us-east-1-943081362793/jenkinsartifact/${renamedArtifactName}"
              }
           }
        }
    }


        
    

    post {
        success {
            archiveArtifacts artifacts: '**/*.war', allowEmptyArchive: true
        }
    }

    
    
}
